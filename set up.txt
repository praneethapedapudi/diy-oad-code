///////////////////////////////////////////////////////////////////////////////////////
//Terms of use
///////////////////////////////////////////////////////////////////////////////////////
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.
///////////////////////////////////////////////////////////////////////////////////////
//Safety note
///////////////////////////////////////////////////////////////////////////////////////
//Always remove the propellers and stay away from the motors unless you 
//are 100% certain of what you are doing.
///////////////////////////////////////////////////////////////////////////////////////
#include <Wire.h>                          //Include the Wire.h library so we can communicate with the gyro.
#include <EEPROM.h>                        //Include the EEPROM.h library so we can store information onto the EEPROM
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//PID gain and limit settings
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float pid_p_gain_roll = 1.4;               //Gain setting for the roll P-controller (1.3)
float pid_i_gain_roll = 0.05;              //Gain setting for the roll I-controller (0.05)
float pid_d_gain_roll = 15;                //Gain setting for the roll D-controller (15)
int pid_max_roll = 400;                    //Maximum output of the PID-controller (+/-)
float pid_p_gain_pitch = pid_p_gain_roll;  //Gain setting for the pitch P-controller.
float pid_i_gain_pitch = pid_i_gain_roll;  //Gain setting for the pitch I-controller.
float pid_d_gain_pitch = pid_d_gain_roll;  //Gain setting for the pitch D-controller.
int pid_max_pitch = pid_max_roll;          //Maximum output of the PID-controller (+/-)
float pid_p_gain_yaw = 4.0;                //Gain setting for the pitch P-controller. //4.0
float pid_i_gain_yaw = 0.02;               //Gain setting for the pitch I-controller. //0.02
float pid_d_gain_yaw = 0.0;                //Gain setting for the pitch D-controller.
int pid_max_yaw = 400;                     //Maximum output of the PID-controller (+/-)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Declaring global variables
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
byte last_channel_1, last_channel_2, last_channel_3, last_channel_4;
byte eeprom_data[36];
byte highByte, lowByte;
int receiver_input_channel_1, receiver_input_channel_2, receiver_input_channel_3, receiver_input_channel_4;
int counter_channel_1, counter_channel_2, counter_channel_3, counter_channel_4, loop_counter;
int esc_1, esc_2, esc_3, esc_4;
int throttle, battery_voltage;
int cal_int, start, gyro_address;
int receiver_input[5];
volatile unsigned long timer_channel_1, timer_channel_2, timer_channel_3, timer_channel_4, esc_timer, esc_loop_timer;
unsigned long timer_1, timer_2, timer_3, timer_4, current_time;
unsigned long loop_timer;
double gyro_pitch, gyro_roll, gyro_yaw;
double gyro_axis[4], gyro_axis_cal[4];
float pid_error_temp;
float pid_i_mem_roll, pid_roll_setpoint, gyro_roll_input, pid_output_roll, pid_last_roll_d_error;
float pid_i_mem_pitch, pid_pitch_setpoint, gyro_pitch_input, pid_output_pitch, pid_last_pitch_d_error;
float pid_i_mem_yaw, pid_yaw_setpoint, gyro_yaw_input, pid_output_yaw, pid_last_yaw_d_error;

// AA
////////////////////////////////////////////////////////
// PPM Input                                          //
////////////////////////////////////////////////////////
volatile unsigned long last_ppm_clock = 99999;
volatile unsigned long current_ppm_clock = 0;
volatile unsigned long ppm_dt = 0;
volatile boolean ppm_read = true;
volatile boolean ppm_sync = false;
volatile unsigned short ppm_current_channel = 99;
volatile unsigned long ppm_channels[11] = {0,0,0,0,0,0,0,0,0,0,0}; // at most 10 channels (sync chaneel + 10 = 11)
#define NUMBER_OF_PPM_CHANNELS 4

void ppmRising() {
  ppm_read = false;
    {
      current_ppm_clock = micros();
      ppm_dt = current_ppm_clock - last_ppm_clock;
      if( ppm_dt >= 3500 ) {
        ppm_sync = true;
        ppm_current_channel = 0;
        ppm_channels[ppm_current_channel] = ppm_dt;         
      }
      else {
        if( ppm_sync ) {
          ppm_current_channel++;
          if( ppm_current_channel > NUMBER_OF_PPM_CHANNELS ) ppm_sync = false;
          else ppm_channels[ppm_current_channel] = ppm_dt; 
        }
      }
      last_ppm_clock = current_ppm_clock;   
    }
  ppm_read = true;
}
///////////////////////////////////////////////////
// PPM Input                                     //
///////////////////////////////////////////////////
// AA

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Setup routine
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup(){
  //Serial.begin(57600);

  Serial.begin(57600);

  //Read EEPROM for fast access data.
  for(start = 0; start <= 35; start++)eeprom_data[start] = EEPROM.read(start);
  gyro_address = eeprom_data[32];                              //Store the gyro address in the variable.
@@ -105,12 +146,19 @@ void setup(){
  gyro_axis_cal[1] /= 2000;                                    //Divide the roll total by 2000.
  gyro_axis_cal[2] /= 2000;                                    //Divide the pitch total by 2000.
  gyro_axis_cal[3] /= 2000;                                    //Divide the yaw total by 2000.

  PCICR |= (1 << PCIE0);                                       //Set PCIE0 to enable PCMSK0 scan.
  PCMSK0 |= (1 << PCINT0);                                     //Set PCINT0 (digital input 8) to trigger an interrupt on state change.
  PCMSK0 |= (1 << PCINT1);                                     //Set PCINT1 (digital input 9)to trigger an interrupt on state change.
  PCMSK0 |= (1 << PCINT2);                                     //Set PCINT2 (digital input 10)to trigger an interrupt on state change.
  PCMSK0 |= (1 << PCINT3);                                     //Set PCINT3 (digital input 11)to trigger an interrupt on state change.

// AA removing pin change interrupt begin used for PWM input
// Original PWM input setup 
//  PCICR |= (1 << PCIE0);                                       //Set PCIE0 to enable PCMSK0 scan.
//  PCMSK0 |= (1 << PCINT0);                                     //Set PCINT0 (digital input 8) to trigger an interrupt on state change.
//  PCMSK0 |= (1 << PCINT1);                                     //Set PCINT1 (digital input 9)to trigger an interrupt on state change.
//  PCMSK0 |= (1 << PCINT2);                                     //Set PCINT2 (digital input 10)to trigger an interrupt on state change.
//  PCMSK0 |= (1 << PCINT3);                                     //Set PCINT3 (digital input 11)to trigger an interrupt on state change.
// AA

// AA PPM input setup
  attachInterrupt(digitalPinToInterrupt(3), ppmRising, RISING);  
// AA PPM   

  //Wait until the receiver is active and the throtle is set to the lower position.
  while(receiver_input_channel_3 < 990 || receiver_input_channel_3 > 1020 || receiver_input_channel_4 < 1400){
@@ -149,6 +197,17 @@ void loop(){
  receiver_input_channel_2 = convert_receiver_channel(2);      //Convert the actual receiver signals for roll to the standard 1000 - 2000us.
  receiver_input_channel_3 = convert_receiver_channel(3);      //Convert the actual receiver signals for throttle to the standard 1000 - 2000us.
  receiver_input_channel_4 = convert_receiver_channel(4);      //Convert the actual receiver signals for yaw to the standard 1000 - 2000us.
/*
 * AA Debug RX channel inputs
  Serial.print( receiver_input_channel_1 );
  Serial.print( " " );
  Serial.print( receiver_input_channel_2 );
  Serial.print( " " );
  Serial.print( receiver_input_channel_3 );
  Serial.print( " " );
  Serial.println( receiver_input_channel_4 );
 * AA
*/  

  //Let's get the current gyro data and scale it to degrees per second for the pid calculations.
  gyro_signalen();
@@ -157,21 +216,38 @@ void loop(){
  gyro_pitch_input = (gyro_pitch_input * 0.8) + ((gyro_pitch / 57.14286) * 0.2);         //Gyro pid input is deg/sec.
  gyro_yaw_input = (gyro_yaw_input * 0.8) + ((gyro_yaw / 57.14286) * 0.2);               //Gyro pid input is deg/sec.

  //For starting the motors: throttle low and yaw left (step 1).
  if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050)start = 1;
  //When yaw stick is back in the center position start the motors (step 2).
  if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450){
    start = 2;
    //Reset the pid controllers for a bumpless start.
    pid_i_mem_roll = 0;
    pid_last_roll_d_error = 0;
    pid_i_mem_pitch = 0;
    pid_last_pitch_d_error = 0;
    pid_i_mem_yaw = 0;
    pid_last_yaw_d_error = 0;

  // AA
  if( throttle <= 1000 ) {
    //For starting the motors: throttle low and yaw left (step 1).
    if(receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050 ) {
      start = 1;

      throttle = 1000; // AA for center stick TX setup    
    }

    //When yaw stick is back in the center position start the motors (step 2).
    if(start == 1 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1450 ){
      start = 2;
      //Reset the pid controllers for a bumpless start.
      pid_i_mem_roll = 0;
      pid_last_roll_d_error = 0;
      pid_i_mem_pitch = 0;
      pid_last_pitch_d_error = 0;
      pid_i_mem_yaw = 0;
      pid_last_yaw_d_error = 0;

      throttle = 1000; // AA for center stick TX setup        
    }

    //Stopping the motors: throttle low and yaw right.
    if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950) {
      start = 0;

      throttle = 1000; // AA for center stick TX setup    
    }
  }
  //Stopping the motors: throttle low and yaw right.
  if(start == 2 && receiver_input_channel_3 < 1050 && receiver_input_channel_4 > 1950)start = 0;


  //The PID set point in degrees per second is determined by the roll receiver input.
  //In the case of deviding by 3 the max roll rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
@@ -205,10 +281,35 @@ void loop(){

  //Turn on the led if battery voltage is to low.
  if(battery_voltage < 1030 && battery_voltage > 600)digitalWrite(12, HIGH);

  throttle = receiver_input_channel_3;                                      //We need the throttle signal as a base signal.

  // AA
  // Removed (A)
  // original version throttle is based on TX stick position
  // throttle = receiver_input_channel_3;                                   //We need the throttle signal as a base signal.
  // AA

  if (start == 2){                                                          //The motors are started.

    ///////////////////////////////////////////////////////////////////////////////////////////
    // AA
    // hover mode throttle
    // Added in place of (A)
    //
    // throttle_stick position at 1500 means no change in current thottle
    // throttle_stick > 1500 means increase the throttle
    // throttle_stick < 1500 means decrease the throttle
    // final throttle value is between 1000 and 2000
         if( receiver_input_channel_3 < 1050  && throttle > 1400 ) { throttle -= 50; } // AA fast decrease in throttle
    else if( receiver_input_channel_3 < 1200  && throttle > 1010 ) { throttle -= 10; } // AA medium decrease in throttle
    else if( receiver_input_channel_3 < 1400  && throttle > 1001 ) { throttle -= 1;  } // AA slow decrease in throttle   
    else if( receiver_input_channel_3 > 1600  && throttle < 1800 ) { throttle += 1;  } // AA slow increase in throttle
    else if( receiver_input_channel_3 > 1800  && throttle < 1800 ) { throttle += 10; } // AA medium increase in throttle   
    else if( receiver_input_channel_3 < 1400 ) { throttle = 1000;  }    
    Serial.println( throttle );
    // hover mode throttle
    // AA
    ///////////////////////////////////////////////////////////////////////////////////////////

    if (throttle > 1800) throttle = 1800;                                   //We need some room to keep full control at full throttle.
    esc_1 = throttle - pid_output_pitch + pid_output_roll - pid_output_yaw; //Calculate the pulse for esc 1 (front-right - CCW)
    esc_2 = throttle + pid_output_pitch + pid_output_roll + pid_output_yaw; //Calculate the pulse for esc 2 (rear-right - CW)
@@ -263,6 +364,7 @@ void loop(){
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//This routine is called every time input 8, 9, 10 or 11 changed state
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
ISR(PCINT0_vect){
  current_time = micros();
  //Channel 1=========================================
@@ -311,6 +413,7 @@ ISR(PCINT0_vect){
    receiver_input[4] = current_time - timer_4;                //Channel 4 is current_time - timer_4
  }
}
*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Subroutine for reading the gyro
@@ -415,7 +518,21 @@ int convert_receiver_channel(byte function){
  if(eeprom_data[function + 23] & 0b10000000)reverse = 1;                      //Reverse channel when most significant bit is set
  else reverse = 0;                                                            //If the most significant is not set there is no reverse

  actual = receiver_input[channel];                                            //Read the actual receiver value for the corresponding function

  // Original PWM input
  // actual = receiver_input[channel];                                          //Read the actual receiver value for the corresponding function

  // PPM input
  //while(1) {
  //  if( ppm_read && ppm_sync ) {
      cli();  
        actual = ppm_channels[channel] ;
      sei();
  //    break;
  //  }
  //}
  // PPM

  low = (eeprom_data[channel * 2 + 15] << 8) | eeprom_data[channel * 2 + 14];  //Store the low value for the specific receiver input channel
  center = (eeprom_data[channel * 2 - 1] << 8) | eeprom_data[channel * 2 - 2]; //Store the center value for the specific receiver input channel
  high = (eeprom_data[channel * 2 + 7] << 8) | eeprom_data[channel * 2 + 6];   //Store the high value for the specific receiver input channel
@@ -426,7 +543,7 @@ int convert_receiver_channel(byte function){
    if(reverse == 1)return 1500 + difference;                                  //If the channel is reversed
    else return 1500 - difference;                                             //If the channel is not reversed
  }
  else if(actual > center){                                                                        //The actual receiver value is higher than the center value
  else if(actual > center){                                                    //The actual receiver value is higher than the center value
    if(actual > high)actual = high;                                            //Limit the lowest value to the value that was detected during setup
    difference = ((long)(actual - center) * (long)500) / (high - center);      //Calculate and scale the actual value to a 1000 - 2000us value
    if(reverse == 1)return 1500 - difference;                                  //If the channel is reversed
69 YMFC-3D_V2_ppm_setup/YMFC-3D_V2_ppm_setup.ino
@@ -24,7 +24,9 @@ byte lowByte, highByte, type, gyro_address, error, clockspeed_ok;
byte channel_1_assign, channel_2_assign, channel_3_assign, channel_4_assign;
byte roll_axis, pitch_axis, yaw_axis;
byte receiver_check_byte, gyro_check_byte;

volatile int receiver_input_channel_1, receiver_input_channel_2, receiver_input_channel_3, receiver_input_channel_4;

int center_channel_1, center_channel_2, center_channel_3, center_channel_4;
int high_channel_1, high_channel_2, high_channel_3, high_channel_4;
int low_channel_1, low_channel_2, low_channel_3, low_channel_4;
@@ -33,22 +35,76 @@ unsigned long timer, timer_1, timer_2, timer_3, timer_4, current_time;
float gyro_pitch, gyro_roll, gyro_yaw;
float gyro_roll_cal, gyro_pitch_cal, gyro_yaw_cal;

////////////////////////////////////////////////////////
// PPM Input                                          //
////////////////////////////////////////////////////////
volatile unsigned long last_ppm_clock = 99999;
volatile unsigned long current_ppm_clock = 0;
volatile unsigned long ppm_dt = 0;
volatile boolean ppm_read = true;
volatile boolean ppm_sync = false;
volatile unsigned short ppm_current_channel = 99;
volatile unsigned long ppm_channels[11] = {0,0,0,0,0,0,0,0,0,0,0};

void ppmRising() {
  ppm_read = false;
    {
      current_ppm_clock = micros();
      ppm_dt = current_ppm_clock - last_ppm_clock;
      if( ppm_dt >= 3500 ) {
        ppm_sync = true;
        ppm_current_channel = 0;
        ppm_channels[ppm_current_channel] = ppm_dt;         
      }
      else {
        if( ppm_sync ) {
          ppm_current_channel++;
          if( ppm_current_channel > 7 ) ppm_sync = false;
          else ppm_channels[ppm_current_channel] = ppm_dt; 
        }
      }
      last_ppm_clock = current_ppm_clock;   
    }
  ppm_read = true;

  read_receiver();
}
///////////////////////////////////////////////////
// PPM Input                                     //
///////////////////////////////////////////////////

void read_receiver() {
  if( ppm_read && ppm_sync ) {
    cli();
    receiver_input_channel_1 = ppm_channels[1] ;    
    receiver_input_channel_2 = ppm_channels[2] ;    
    receiver_input_channel_3 = ppm_channels[3] ;    
    receiver_input_channel_4 = ppm_channels[4] ;    
    sei();
  }
}

//Setup routine
void setup(){

  pinMode(12, OUTPUT);

  //Arduino (Atmega) pins default to inputs, so they don't need to be explicitly declared as inputs
  PCICR |= (1 << PCIE0);    // set PCIE0 to enable PCMSK0 scan
  PCMSK0 |= (1 << PCINT0);  // set PCINT0 (digital input 8) to trigger an interrupt on state change
  PCMSK0 |= (1 << PCINT1);  // set PCINT1 (digital input 9)to trigger an interrupt on state change
  PCMSK0 |= (1 << PCINT2);  // set PCINT2 (digital input 10)to trigger an interrupt on state change
  PCMSK0 |= (1 << PCINT3);  // set PCINT3 (digital input 11)to trigger an interrupt on state change
  // PWM In
  // PCICR |= (1 << PCIE0);    // set PCIE0 to enable PCMSK0 scan
  // PCMSK0 |= (1 << PCINT0);  // set PCINT0 (digital input 8) to trigger an interrupt on state change
  // PCMSK0 |= (1 << PCINT1);  // set PCINT1 (digital input 9)to trigger an interrupt on state change
  // PCMSK0 |= (1 << PCINT2);  // set PCINT2 (digital input 10)to trigger an interrupt on state change
  // PCMSK0 |= (1 << PCINT3);  // set PCINT3 (digital input 11)to trigger an interrupt on state change
  attachInterrupt(digitalPinToInterrupt(3), ppmRising, RISING);    

  Wire.begin();             //Start the I2C as master
  Serial.begin(57600);      //Start the serial connetion @ 57600bps
  delay(250);               //Give the gyro time to start 
}
//Main program
void loop(){

  //Show the YMFC-3D V2 intro
  intro();

@@ -110,6 +166,7 @@ void loop(){
    Serial.println(receiver_input_channel_4);
    Serial.println(F(""));
    Serial.println(F(""));
delay(10000);  
  }
  if(error == 0){  
    Serial.println(F("Move the throttle stick to full throttle and back to center"));
@@ -787,6 +844,7 @@ void check_gyro_axes(byte movement){

}

/*
//This routine is called every time input 8, 9, 10 or 11 changed state
ISR(PCINT0_vect){
  current_time = micros();
@@ -836,6 +894,7 @@ ISR(PCINT0_vect){
    receiver_input_channel_4 = current_time - timer_4;         //Channel 4 is current_time - timer_4
  }
}
*/

//Intro subroutine
void intro(){
  Serial.println(F("==================================================="));
  delay(1500);
  Serial.println(F(""));
  Serial.println(F("Your"));
  delay(500);
  Serial.println(F("  Multicopter"));
  delay(500);
  Serial.println(F("    Flight"));
  delay(500);
  Serial.println(F("      Controller"));
  delay(1000);
  Serial.println(F(""));
  Serial.println(F("V         V     22222                "));
  delay(200);
  Serial.println(F(" V       V     2     2             "));
  delay(200);
  Serial.println(F("  V     V          2             "));
  delay(200);
  Serial.println(F("   V   V         2              "));
  delay(200);
  Serial.println(F("    V V        2                  "));
  delay(200);
  Serial.println(F("     V        22222222                  "));
  delay(500);
  Serial.println(F(""));
  Serial.println(F("YMFC-V2 Setup Program"));
  Serial.println(F(""));
  Serial.println(F("==================================================="));
  delay(1500);
  Serial.println(F("For support and questions: www.brokking.net"));
  Serial.println(F(""));
  Serial.println(F("Have fun!"));
}